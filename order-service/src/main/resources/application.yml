server:
  port: 8080

logging:
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

management:
  endpoints:
    web:
      exposure:
        include:
          - prometheus

  metrics.distribution.percentiles-histogram.http.server.requests: true
  tracing.sampling.probability: 1.0

spring:
  application:
    name: order-service
  r2dbc:
    url: r2dbc:postgresql://localhost:5432/order
    username: postgres
    password: postgres
  cloud:
    function:
      definition: supplier;consumer
    stream:
      bindings:
        supplier-out-0:
          destination: order-created
          group: order-service
        consumer-in-0:
          destination: order-updated
          group: order-service
      kafka:
        binder:
          brokers: localhost
          defaultBrokerPort: 9094
  jpa:
    defer-datasource-initialization: true
    database: postgresql
    show-sql: true
    generate-ddl: true
    open-in-view: false
  sql:
    init:
      mode: ALWAYS
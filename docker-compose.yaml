version: "3.8"

services:
  order-db:
    image: 'postgres:15.2'
    container_name: saga_order_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=order

  payment-db:
    image: 'postgres:15.2'
    container_name: saga_payment_db
    ports:
      - "25432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=payment

  inventory-db:
    image: 'postgres:15.2'
    container_name: saga_inventory_db
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=inventory

  kafka:
    image: docker.io/bitnami/kafka:3.6
    container_name: saga_kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - ./docker/data/kafka:/bitnami/kafka
      - ./docker/data/jmx-exporter:/opt/jmx-exporter
    networks:
      - kafka
    healthcheck:
      test: "kafka-cluster.sh cluster-id --bootstrap-server localhost:9092 || exit 1"
      interval: 15s
      timeout: 15s
      retries: 3
      start_period: 10s
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_METRICS_KAFKA_ENABLED=true
      - KAFKA_HEAP_OPTS=-Xms256m -Xmx512m

  kafka-exporter:
    image: docker.io/bitnami/kafka-exporter:1.7.0
    container_name: saga_kafka-exporter
    ports:
      - "9308:9308"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka
    command:
      - '--kafka.server=kafka:9092'
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9308; exit $$?;"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    container_name: saga_prometheus
    volumes:
      - ./docker/config/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: saga_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=localhost

  loki:
    image: grafana/loki:1.4.1
    extra_hosts: ['host.docker.internal:host-gateway']
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1

  tempo:
    image: grafana/tempo:2.3.1
    extra_hosts: ['host.docker.internal:host-gateway']
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/config/tempo.yaml:/etc/tempo.yaml:ro
      - ./docker/data/tempo:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin

networks:
  kafka:
    driver: bridge

volumes:
  grafana-storage: {}
